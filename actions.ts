/* This file is autogenerated by liwe3-svelte */
/* eslint-disable @typescript-eslint/no-inferrable-types */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */

/*=== f2c_start __file ===*/
import { clearUser, initUser } from './store';
import type { UserPerms } from './types';
import { browser } from '$app/environment';

export const user_init = async ( data: string = '' ) => {
	if ( !data && browser ) data = await localStorage.getItem( 'user' ) ?? '';
	if ( !data ) return;

	initUser( JSON.parse( data ) );

	const res = await user_me();

	if ( res.error ) clearUser();
};
/*=== f2c_end __file ===*/

import { get, patch, post, delete_ } from '$liwe3/utils/fetcher';

/**
 * This endpoint creates a valid user in the system, bypassing registration and verification phases.
 *
 * @param email - The user email [req]
 * @param password - The user password [req]
 * @param username - The username [req]
 * @param name - The user first name [opt]
 * @param lastname - The user lastname [opt]
 * @param perms - User permissions [opt]
 * @param enabled - Flag T/F to know if the user is enabled [opt]
 * @param language - The user language [opt]
 *
 * @return user: User
 *
 */
export const user_admin_add = async ( email: string, password: string, username: string, name?: string, lastname?: string, perms?: string[], enabled?: boolean, language?: string ) => {
	const res = await post( `/api/user/admin/add`, { 
		email,
		enabled,
		language,
		lastname,
		name,
		password,
		perms,
		username
	 }, true );

	if (res.error) return res;

	/*=== f2c_start user_admin_add ===*/

	/*=== f2c_end user_admin_add ===*/

	return res.user;
};

/**
 * @param id - The user id to be changed [req]
 * @param email - the new user email [opt]
 * @param password - the user password [opt]
 * @param name - the user first name [opt]
 * @param lastname - the user lastname [opt]
 * @param enabled - If the user is enabled or not [opt]
 * @param level - The user level [opt]
 * @param language - The user language [opt]
 *
 * @return user: User
 *
 */
export const user_admin_update = async ( id: string, email?: string, password?: string, name?: string, lastname?: string, enabled?: boolean, level?: number, language?: string ) => {
	const res = await patch( `/api/user/admin/update`, { 
		email,
		enabled,
		id,
		language,
		lastname,
		level,
		name,
		password
	 }, true );

	if (res.error) return res;

	/*=== f2c_start user_admin_update ===*/

	/*=== f2c_end user_admin_update ===*/

	return res.user;
};

/**
 * Deletes a user from the system
 *
 * @param id_user - The user ID to be deleted [req]
 *
 * @return id_user: str
 *
 */
export const user_admin_del = async ( id_user: string ) => {
	const res = await delete_( `/api/user/admin/del`, { id_user }, true );

	if (res.error) return res;

	/*=== f2c_start user_admin_del ===*/

	/*=== f2c_end user_admin_del ===*/

	return res.id_user;
};

/**
 * The call modifies a single field.
 * This function returns the full `User` structure
 *
 * @param id - the user id [req]
 * @param data - The field / value to patch [req]
 *
 * @return user: User
 *
 */
export const user_admin_fields = async ( id: string, data: any ) => {
	const res = await patch( `/api/user/admin/fields`, { id, data }, true );

	if (res.error) return res;

	/*=== f2c_start user_admin_fields ===*/

	/*=== f2c_end user_admin_fields ===*/

	return res.user;
};

/**
 * Start the registration process of the user.
 * The call creates an entry inside the database (if no error is encountered)
 * If in **debug mode** this functyion returns  the `UserActivationCode`
 *
 * @param email - the new user email [req]
 * @param password - the user password [req]
 * @param recaptcha - The recaptcha check code [req]
 * @param name - the user first name [opt]
 * @param lastname - the user lastname [opt]
 * @param phone - the user phone [opt]
 * @param username - The user username [opt]
 * @param group - The user group [opt]
 *
 * @return uac: UserActivationCode
 *
 */
export const user_register = async ( email: string, password: string, recaptcha: string, name?: string, lastname?: string, phone?: string, username?: string, group?: string ) => {
	const res = await post( `/api/user/register`, { 
		email,
		group,
		lastname,
		name,
		password,
		phone,
		recaptcha,
		username
	 }, false );

	if (res.error) return res;

	/*=== f2c_start user_register ===*/

	/*=== f2c_end user_register ===*/

	return res.uac;
};

/**
 * Updates user data.
 * You can specify one or more of the required fields.
 * Some fields, such as `email` and `username` are checked for uniqueness.
 * Only the user can update him/her self.
 *
 * @param email - the new user email [opt]
 * @param password - the user password [opt]
 * @param name - the user name [opt]
 * @param lastname - the user lastname [opt]
 * @param username - the username [opt]
 * @param group - The user group [opt]
 * @param phone - The user phone number [opt]
 *
 * @return user: User
 *
 */
export const user_update = async ( email?: string, password?: string, name?: string, lastname?: string, username?: string, group?: string, phone?: string ) => {
	const res = await patch( `/api/user/update`, { 
		email,
		group,
		lastname,
		name,
		password,
		phone,
		username
	 }, true );

	if (res.error) return res;

	/*=== f2c_start user_update ===*/

	/*=== f2c_end user_update ===*/

	return res.user;
};

/**
 * Uploads a user avatar.
 * Only the user can update him/her self.
 *
 * @param avatar - The user avatar file [req]
 *
 * @return user: User
 *
 */
export const user_avatar = async ( avatar: File ) => {
	const res = await post( `/api/user/avatar`, { avatar }, true );

	if (res.error) return res;

	/*=== f2c_start user_avatar ===*/

	/*=== f2c_end user_avatar ===*/

	return res.user;
};

/**
 * Uploads a user face for face recognition.
 * Only the user can update him/her self.
 *
 * @param face - the user face photo [req]
 *
 * @return facerec: UserFaceRec
 *
 */
export const user_facerec_add = async ( face: File ) => {
	const res = await post( `/api/user/facerec/add`, { face }, true );

	if (res.error) return res;

	/*=== f2c_start user_facerec_add ===*/

	/*=== f2c_end user_facerec_add ===*/

	return res.facerec;
};

/**
 * Start the 'Password forgotten' process for the user.
 * The call creates a temporary token for the user.
 * In **debug mode**  returns to the user the activation code as  ``str`` inside ``uac``.
 *
 * @param email - the user email [req]
 * @param recaptcha - the recaptcha verification code [req]
 *
 * @return uac: str
 *
 */
export const user_password_forgot = async ( email: string, recaptcha: string ) => {
	const res = await post( `/api/user/password-forgot`, { email, recaptcha }, false );

	if (res.error) return res;

	/*=== f2c_start user_password_forgot ===*/

	/*=== f2c_end user_password_forgot ===*/

	return res.uac;
};

/**
 * Resets the user password.
 *
 * @param email - the user email [req]
 * @param code - the activation code [req]
 * @param password - the new password [req]
 *
 * @return ok: boolean
 *
 */
export const user_password_reset = async ( email: string, code: string, password: string ) => {
	const res = await post( `/api/user/password-reset`, { email, code, password }, false );

	if (res.error) return res;

	/*=== f2c_start user_password_reset ===*/

	/*=== f2c_end user_password_reset ===*/

	return res.ok;
};

/**
 * This is the activation request.
 *
 * @param code - the activation code returned by the /api/register call [req]
 *
 * @return user: User
 *
 */
export const user_register_activate = async ( code: string ) => {
	const res = await get( `/api/user/register/activate/:code`, { code }, false );

	if (res.error) return res;

	/*=== f2c_start user_register_activate ===*/

	/*=== f2c_end user_register_activate ===*/

	return res.user;
};

/**
 * This endpoint allows you to add tags to a user.
 *
 * @param id_user - the user id [req]
 * @param tags -  A list of tags to be added to the user [req]
 *
 * @return user: User
 *
 */
export const user_tag = async ( id_user: string, tags: string[] ) => {
	const res = await post( `/api/user/tag`, { id_user, tags }, true );

	if (res.error) return res;

	/*=== f2c_start user_tag ===*/

	/*=== f2c_end user_tag ===*/

	return res.user;
};

/**
 * This endpoint implements the user authentication with the ``OAuth2`` protocol.
 * If the user is known, a JWT token with the running session is returned to the system.
 *
 * @param username - it must contain the user email [req]
 * @param password - the user password [req]
 *
 * @return __plain__: UserSessionData
 *
 */
export const user_token = async ( username: string, password: string ) => {
	const res = await post( `/api/user/token`, { username, password }, false );

	if (res.error) return res;

	/*=== f2c_start user_token ===*/

	/*=== f2c_end user_token ===*/

	return res;
};

/**
 * This endpoint implements the user authentication with ``email`` or ``username`` and ``password`` field.
 * The call must provide also ``recaptcha`` or ``challenge`` in order to verify the validity of the call. \
 * You don't have to provide both, but one is mandatory.
 * If the user is known, a JWT token with the running session is returned to the system.
 *
 * @param password - the user password [req]
 * @param email - The user email [opt]
 * @param username - The username [opt]
 * @param recaptcha - The recaptcha check code [opt]
 * @param challenge - The challenge verification code [opt]
 *
 * @return __plain__: UserSessionData
 *
 */
export const user_login = async ( password: string, email?: string, username?: string, recaptcha?: string, challenge?: string ) => {
	const res = await post( `/api/user/login`, { 
		challenge,
		email,
		password,
		recaptcha,
		username
	 }, false );

	if (res.error) return res;

	/*=== f2c_start user_login ===*/

	/*=== f2c_end user_login ===*/

	return res;
};

/**
 * This endpoint logs in a user authenticated by a remote service.
 * Since this is a public call, the `challenge` parameter is used to verify that the call is from the correct service.
 * The `challenge` parameter is a `MD5` hash created composing (`email` + `name` + `remote_secret_key` as set in the `data.json` config file under `security / remote`).
 * The `avatar` parameter is optional and it can contain an absolute URL to an image avatar of the user.
 *
 * @param email - The user email [req]
 * @param name - The user name [req]
 * @param challenge - The challenge [req]
 * @param avatar - The user avatar [opt]
 *
 * @return __plain__: UserSessionData
 *
 */
export const user_login_remote = async ( email: string, name: string, challenge: string, avatar?: string ) => {
	const res = await post( `/api/user/login/remote`, { 
		avatar,
		challenge,
		email,
		name
	 }, false );

	if (res.error) return res;

	/*=== f2c_start user_login_remote ===*/

	/*=== f2c_end user_login_remote ===*/

	return res;
};

/**
 * Returns all user registered to the system.
 * If `domain` is specified, the list is filtered by domain.
 * If the user does not have the `system.admin` permission, only the users by his `domain` will be shown.
 * If `tag` is specified, the list is filtered by tag.
 *
 * @param tag -  The tag to filter by [opt]
 *
 * @return users: User
 *
 */
export const user_admin_list = async ( tag?: string ) => {
	const res = await get( `/api/user/admin/list`, { tag }, true );

	if (res.error) return res;

	/*=== f2c_start user_admin_list ===*/

	/*=== f2c_end user_admin_list ===*/

	return res.users;
};

/**
 * This endpoint logs out the current user
 *
 *
 * @return ok: boolean
 *
 */
export const user_logout = async (  ) => {
	const res = await get( `/api/user/logout`, {}, true );

	if (res.error) return res;

	/*=== f2c_start user_logout ===*/

	/*=== f2c_end user_logout ===*/

	return res.ok;
};

/**
 * This endpoints returns all data related to the currently logged in user.
 *
 *
 * @return user: User
 *
 */
export const user_me = async (  ) => {
	const res = await get( `/api/user/me`, {}, true );

	if (res.error) return res;

	/*=== f2c_start user_me ===*/

	/*=== f2c_end user_me ===*/

	return res.user;
};

/**
 * This endpoint set the full user permissions.
 * The function will allow changing the permsissions only if the request comes from a logged user with the `user.perms` permission set.
 * If the  `system: [ 'admin' ]` permission is set to the user, it becomes a super user and can do **all** operations on the system.
 *
 * @param id_user - The user id [req]
 * @param perms - A JSON of `UserPerms` structure [req]
 *
 * @return ok: boolean
 *
 */
export const user_perms_set = async ( id_user: string, perms: UserPerms ) => {
	const res = await post( `/api/user/perms_set`, { id_user, perms }, true );

	if (res.error) return res;

	/*=== f2c_start user_perms_set ===*/

	/*=== f2c_end user_perms_set ===*/

	return res.ok;
};

/**
 * This endpoint adds extra information inside the `extra` field, under the `key` specified.
 * If `key` was already present in the `extra` field, everything in `key` will be overwritten.
 * New `key`s will be added to `extra`.
 * If `key` is omitted (passing `''`)  the data is added to the `extra` root.
 *
 * @param key - the  main key [req]
 * @param data - the new data to be added [req]
 *
 * @return ok: boolean
 *
 */
export const user_info_add = async ( key: string, data: any ) => {
	const res = await post( `/api/user/info_add`, { key, data }, true );

	if (res.error) return res;

	/*=== f2c_start user_info_add ===*/

	/*=== f2c_end user_info_add ===*/

	return res.ok;
};

/**
 * This endpoint deletes the specified `key` from the `extra` field.
 *
 * @param key - The `key` to be deleted [req]
 *
 * @return ok: boolean
 *
 */
export const user_info_del = async ( key: string ) => {
	const res = await delete_( `/api/user/info_del`, { key }, true );

	if (res.error) return res;

	/*=== f2c_start user_info_del ===*/

	/*=== f2c_end user_info_del ===*/

	return res.ok;
};

/**
 * This is the first tab 'Profile' of the UserProfile interface.
 * You can change data only to the current loggedin user.
 *
 * @param name - The user name [opt]
 * @param lastname - The user lastname [opt]
 * @param phone - User phone [opt]
 * @param email - user email [opt]
 * @param addr_street - Address street [opt]
 * @param addr_nr - Address street number [opt]
 * @param addr_zip - Address zip code [opt]
 * @param addr_city - Address city [opt]
 * @param addr_state - Address state (or probvince) [opt]
 * @param addr_country - Address country [opt]
 * @param facebook - Facebook user name [opt]
 * @param twitter - Twitter user name [opt]
 * @param linkedin - Linkedin user name [opt]
 * @param instagram - Instagram user name [opt]
 * @param website - User personal web site [opt]
 *
 * @return user: User
 *
 */
export const user_profile = async ( name?: string, lastname?: string, phone?: string, email?: string, addr_street?: string, addr_nr?: string, addr_zip?: string, addr_city?: string, addr_state?: string, addr_country?: string, facebook?: string, twitter?: string, linkedin?: string, instagram?: string, website?: string ) => {
	const res = await patch( `/api/user/profile`, { 
		addr_city,
		addr_country,
		addr_nr,
		addr_state,
		addr_street,
		addr_zip,
		email,
		facebook,
		instagram,
		lastname,
		linkedin,
		name,
		phone,
		twitter,
		website
	 }, true );

	if (res.error) return res;

	/*=== f2c_start user_profile ===*/

	/*=== f2c_end user_profile ===*/

	return res.user;
};

/**
 * This endpoint creates a demo user
 *
 *
 * @return user: User
 *
 */
export const user_test_create = async (  ) => {
	const res = await get( `/api/user/test/create`, {}, true );

	if (res.error) return res;

	/*=== f2c_start user_test_create ===*/

	/*=== f2c_end user_test_create ===*/

	return res.user;
};

/**
 * This is the change password functionality for UserProfile tab.
 * You can change data only to the current loggedin user.
 *
 * @param old_password - the old password [req]
 * @param new_password - the new password [req]
 * @param recaptcha - the recaptcha verfication code [req]
 *
 * @return ok: boolean
 *
 */
export const user_change_password = async ( old_password: string, new_password: string, recaptcha: string ) => {
	const res = await patch( `/api/user/change/password`, { old_password, new_password, recaptcha }, true );

	if (res.error) return res;

	/*=== f2c_start user_change_password ===*/

	/*=== f2c_end user_change_password ===*/

	return res.ok;
};

/**
 * Use this endpoint to update user `bio` or `tagline` (or both).
 * The currently logged in user can only change his/her own data.
 *
 * @param tagline - User tagline [opt]
 * @param bio - User bio [opt]
 *
 * @return user: User
 *
 */
export const user_set_bio = async ( tagline?: string, bio?: string ) => {
	const res = await patch( `/api/user/set/bio`, { tagline, bio }, true );

	if (res.error) return res;

	/*=== f2c_start user_set_bio ===*/

	/*=== f2c_end user_set_bio ===*/

	return res.user;
};

/**
 * Creates / updates the user billing info.
 * You can change data only to the current loggedin user.
 *
 * @param address - The street address [opt]
 * @param nr - The street address number [opt]
 * @param name - Address name [opt]
 * @param city - Address city [opt]
 * @param zip - Address postal code [opt]
 * @param state - Address state [opt]
 * @param country - Address country [opt]
 * @param company_name - Company name [opt]
 * @param fiscal_code - Fiscal code [opt]
 * @param vat_number - VAT number [opt]
 * @param sdi - SDI code [opt]
 * @param pec - PEC email [opt]
 *
 * @return user: User
 *
 */
export const user_set_billing = async ( address?: string, nr?: string, name?: string, city?: string, zip?: string, state?: string, country?: string, company_name?: string, fiscal_code?: string, vat_number?: string, sdi?: string, pec?: string ) => {
	const res = await patch( `/api/user/set/billing`, { 
		address,
		city,
		company_name,
		country,
		fiscal_code,
		name,
		nr,
		pec,
		sdi,
		state,
		vat_number,
		zip
	 }, true );

	if (res.error) return res;

	/*=== f2c_start user_set_billing ===*/

	/*=== f2c_end user_set_billing ===*/

	return res.user;
};

/**
 * This endpoint logs in a user authenticated by a remote service.
 * Since this is a public call, the `challenge` parameter is used to verify that the call is from the correct service.
 * The `challenge` parameter is a `MD5` hash created composing (`address` + `remote_secret_key` as set in the `data.json` config file under `security / remote`).
 *
 * @param address - The wallet address [req]
 * @param challenge - The challenge [req]
 *
 * @return __plain__: UserSessionData
 *
 */
export const user_login_metamask = async ( address: string, challenge: string ) => {
	const res = await post( `/api/user/login/metamask`, { address, challenge }, false );

	if (res.error) return res;

	/*=== f2c_start user_login_metamask ===*/

	/*=== f2c_end user_login_metamask ===*/

	return res;
};

/**
 * This method can return a user after searching all users by some params.
 * Params are all optional, but at least one must be given, or the current user will be returned.
 * If the search returns more than one single user, only the first will be returned.
 *
 * @param id - The user id [opt]
 * @param email - The user email [opt]
 * @param name - The user name [opt]
 * @param lastname - The user lastname [opt]
 *
 * @return user: User
 *
 */
export const user_admin_get = async ( id?: string, email?: string, name?: string, lastname?: string ) => {
	const res = await get( `/api/user/admin/get`, { 
		email,
		id,
		lastname,
		name
	 }, true );

	if (res.error) return res;

	/*=== f2c_start user_admin_get ===*/

	/*=== f2c_end user_admin_get ===*/

	return res.user;
};

/**
 * This method removes the current user from the system
 *
 *
 * @return ok: boolean
 *
 */
export const user_remove_me = async (  ) => {
	const res = await get( `/api/user/remove/me`, {}, true );

	if (res.error) return res;

	/*=== f2c_start user_remove_me ===*/

	/*=== f2c_end user_remove_me ===*/

	return res.ok;
};

/**
 * This endpoint set returns full user permissions.
 *
 * @param id_user - The user id [req]
 *
 * @return ok: boolean
 *
 */
export const user_perms_get = async ( id_user: string ) => {
	const res = await get( `/api/user/perms/get`, { id_user }, true );

	if (res.error) return res;

	/*=== f2c_start user_perms_get ===*/

	/*=== f2c_end user_perms_get ===*/

	return res.ok;
};

/**
 * Return all images available for face recognition
 * If the `id_user` is not specified, the current logged user faces are returned.
 * If the `id_user` is specified, but the user does not have the `user.create` permission, the `id_user` will be the one of the currently logged user.
 *
 * @param id_user - The User ID to get faces for [opt]
 *
 * @return faces: UserFaceRec
 *
 */
export const user_faces_get = async ( id_user?: string ) => {
	const res = await get( `/api/user/faces/get`, { id_user }, true );

	if (res.error) return res;

	/*=== f2c_start user_faces_get ===*/

	/*=== f2c_end user_faces_get ===*/

	return res.faces;
};

/**
 * @param id_upload - The ID Upload [req]
 * @param id_user - The user id [opt]
 *
 * @return face: UserFaceRec
 *
 */
export const user_upload2face = async ( id_upload: string, id_user?: string ) => {
	const res = await post( `/api/user/upload2face`, { id_upload, id_user }, true );

	if (res.error) return res;

	/*=== f2c_start user_upload2face ===*/

	/*=== f2c_end user_upload2face ===*/

	return res.face;
};

/**
 *
 * @return ok: boolean
 *
 */
export const user_faces_modules = async (  ) => {
	const res = await get( `/api/user/faces/modules`, {}, false );

	if (res.error) return res;

	/*=== f2c_start user_faces_modules ===*/

	/*=== f2c_end user_faces_modules ===*/

	return res.ok;
};

/**
 * This method is used when you need a temporary session for a user.
 * It creates a *real* user in the database, with fake data.
 * Users have a 24 hours life span, if not converted into "real" users, they are deleted.
 *
 * @param ts - The generated random number [req]
 * @param challenge - The challenge [req]
 *
 * @return user: User
 *
 */
export const user_anonymous = async ( ts: string, challenge: string ) => {
	const res = await post( `/api/user/anonymous`, { ts, challenge }, false );

	if (res.error) return res;

	/*=== f2c_start user_anonymous ===*/

	/*=== f2c_end user_anonymous ===*/

	return res.user;
};

/**
 * Start the registration process of the user replacing the rechapta with a challenge code.
 * The call creates an entry inside the database (if no error is encountered)
 * If in **debug mode** this functyion returns  the `UserActivationCode`
 *
 * @param email - the new user email [req]
 * @param password - the user password [req]
 * @param challenge - The challenge code [req]
 * @param name - the user first name [opt]
 * @param lastname - the user lastname [opt]
 * @param phone - the user phone [opt]
 * @param username - The user username [opt]
 * @param group - The user group [opt]
 *
 * @return uac: UserActivationCode
 *
 */
export const user_register_app = async ( email: string, password: string, challenge: string, name?: string, lastname?: string, phone?: string, username?: string, group?: string ) => {
	const res = await post( `/api/user/register/app`, { 
		challenge,
		email,
		group,
		lastname,
		name,
		password,
		phone,
		username
	 }, false );

	if (res.error) return res;

	/*=== f2c_start user_register_app ===*/

	/*=== f2c_end user_register_app ===*/

	return res.uac;
};

/**
 * This endpoints allows the search of a user in the system.
 * You can search only for one these fields at a time:
 * - `email`
 * - `username`
 * and both these fields are considered complete strings and not partials.
 * The `search` parameter will search in both fields at the same time.
 *
 * @param search - The user email [opt]
 *
 * @return user: UserDetails
 *
 */
export const user_find = async ( search?: string ) => {
	const res = await get( `/api/user/find`, { search }, true );

	if (res.error) return res;

	/*=== f2c_start user_find ===*/

	/*=== f2c_end user_find ===*/

	return res.user;
};

/**
 * Start the 'Password forgotten' process for the user in App Mode, where the reCaptcha cannot be used.
 * This password-forgot takes the `username` that will be checked against both `username` and `email` fields.
 * The call creates a temporary token for the user that is emailed to the user.
 * In **debug mode**  returns to the user the activation code as  ``str`` inside ``uac``.
 *
 * @param username - the username of the user [req]
 * @param challenge - the challenge code [req]
 *
 * @return uac: UserActivationCode
 *
 */
export const user_password_forgot_app = async ( username: string, challenge: string ) => {
	const res = await post( `/api/user/password-forgot/app`, { username, challenge }, false );

	if (res.error) return res;

	/*=== f2c_start user_password_forgot_app ===*/

	/*=== f2c_end user_password_forgot_app ===*/

	return res.uac;
};

/**
 * Deletes a user from the app, providing a challenge.
 * The user can only remove him/her self.
 *
 * @param id_user - The user id to be deleted [req]
 * @param username - The username [req]
 * @param challenge - The request challenge [req]
 *
 * @return ok: boolean
 *
 */
export const user_del_app = async ( id_user: string, username: string, challenge: string ) => {
	const res = await post( `/api/user/del/app`, { id_user, username, challenge }, true );

	if (res.error) return res;

	/*=== f2c_start user_del_app ===*/

	/*=== f2c_end user_del_app ===*/

	return res.ok;
};

/**
 * This endpoint starts a new 2FA authentication process for the user.
 * It generates an internal key and stores it inside the `2fa` field of the user
 *
 *
 * @return url: str
 *
 */
export const user_2fa_start = async (  ) => {
	const res = await get( `/api/user/2fa/start`, {}, true );

	if (res.error) return res;

	/*=== f2c_start user_2fa_start ===*/

	/*=== f2c_end user_2fa_start ===*/

	return res.url;
};

/**
 * Completes the login process by providing the 2FA challenge value
 *
 * @param id - The user id [req]
 * @param code - The 2FA code [req]
 * @param nonce - The nonce code [req]
 *
 * @return __plain__: UserSessionData
 *
 */
export const user_login_2fa = async ( id: string, code: string, nonce: string ) => {
	const res = await post( `/api/user/login/2fa`, { id, code, nonce }, false );

	if (res.error) return res;

	/*=== f2c_start user_login_2fa ===*/

	/*=== f2c_end user_login_2fa ===*/

	return res;
};

/**
 * Used to verify the 2FA activation for a new user.
 * The user must be logged in to use this call.
 *
 * @param code - The 2FA verification code [req]
 *
 * @return ok: boolean
 *
 */
export const user_2fa_verify = async ( code: string ) => {
	const res = await post( `/api/user/2fa/verify`, { code }, true );

	if (res.error) return res;

	/*=== f2c_start user_2fa_verify ===*/

	/*=== f2c_end user_2fa_verify ===*/

	return res.ok;
};

/**
 * This is an enpoint that can help admins to change user password when needed.
 *
 * @param id_user - The user id to change the password to [req]
 * @param password - The new password [req]
 *
 * @return ok: boolean
 *
 */
export const user_admin_change_password = async ( id_user: string, password: string ) => {
	const res = await post( `/api/user/admin/change/password`, { id_user, password }, true );

	if (res.error) return res;

	/*=== f2c_start user_admin_change_password ===*/

	/*=== f2c_end user_admin_change_password ===*/

	return res.ok;
};
